{"version":3,"file":"AppContext-4174ce48.js","sources":["../../src/apps/welcome/welcome-app-def.ts","../../src/constants/apps.ts","../../src/context/AppContext.tsx"],"sourcesContent":["import { App } from \"../../types/app\";\n\nexport const WELCOME_APP_DEF: App = {\n  id: \"welcome\",\n  name: \"Welcome\",\n  icon: \"ðŸ‘‹\",\n};\n","import { HELLO_WORLD_APP } from \"../apps/hello-world/hello-world-def\";\nimport { WELCOME_APP_DEF } from \"../apps/welcome/welcome-app-def\";\nimport { App } from \"../types/app\";\n\n/**\n * List of all the apps on the entire system.\n */\nexport const APPS: Array<App> = [HELLO_WORLD_APP, WELCOME_APP_DEF];\n\nconst DUPLICATE_IDS = new Set<string>();\n\nfor (const app of APPS) {\n  if (DUPLICATE_IDS.has(app.id)) throw new Error(`Duplicate app id: ${app.id}`);\n  DUPLICATE_IDS.add(app.id);\n}\n","import React, {\n  PropsWithChildren,\n  createContext,\n  useEffect,\n  useReducer,\n} from \"react\";\nimport { App, AppInstance } from \"../types/app\";\nimport { APPS } from \"../constants/apps\";\n\n/**\n * The application context. This state should handle\n * anything related to apps/windows and general high level\n * displaying of apps.\n */\nexport interface AppContextState {\n  /**\n   * If the appList is opened\n   */\n  listOpened: boolean;\n  /**\n   * The apps currently available within the system, this is a state variable to make\n   * it easier to dynamically edit/update apps on the fly.\n   */\n  apps: App[];\n  /**\n   * The list of app instances.\n   */\n  appInstances: AppInstance[];\n\n  // TODO: add app locations, will be used to save the location of an app.\n}\n\nexport const AppContext = createContext<AppContextState | null>(null);\n\nexport const AppContextDispatch =\n  createContext<React.Dispatch<AppContextAction> | null>(null);\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport function appReducer(\n  state: AppContextState,\n  action: AppContextAction\n): AppContextState {\n  switch (action.type) {\n    case \"OPEN_APP_LIST\":\n      return {\n        ...state,\n        listOpened: true,\n      };\n    case \"CLOSE_APP_LIST\":\n      return {\n        ...state,\n        listOpened: false,\n      };\n    case \"CLOSE_APP\":\n      return {\n        ...state,\n        appInstances: state.appInstances.filter(\n          ({ instanceId }) => instanceId !== action.appInstanceId\n        ),\n      };\n    case \"OPEN_APP\":\n      return {\n        ...state,\n        appInstances: [...state.appInstances, action.appInstance],\n      };\n    case \"MINIMIZE_APP\":\n      return {\n        ...state,\n        appInstances: state.appInstances.map((appInstance) => {\n          if (appInstance.instanceId === action.appInstanceId) {\n            return {\n              ...appInstance,\n              viewState: \"minimized\",\n            };\n          }\n\n          return appInstance;\n        }),\n      };\n    case \"MAXIMIZE_APP\":\n      return {\n        ...state,\n        appInstances: state.appInstances.map((appInstance) => {\n          if (appInstance.instanceId === action.appInstanceId) {\n            return {\n              ...appInstance,\n              viewState: \"normal\",\n            };\n          }\n\n          return appInstance;\n        }),\n      };\n    default:\n      return state;\n  }\n}\n\n/**\n * Component that provides the AppProvider context to manage global app state.\n *\n * @param props AppProvider props\n */\nexport function AppProvider(\n  props: PropsWithChildren<{\n    /**\n     * List of apps that could be provided to override the defaults.\n     */\n    apps?: App[];\n  }>\n) {\n  const { apps } = props;\n\n  const [state, dispatch] = useReducer(appReducer, {\n    listOpened: false,\n    apps: apps ?? APPS,\n    appInstances: [],\n  });\n\n  useEffect(() => {\n    console.log(\">> state:\", state);\n  }, [state]);\n\n  return (\n    <AppContext.Provider value={state}>\n      <AppContextDispatch.Provider value={dispatch}>\n        {props.children}\n      </AppContextDispatch.Provider>\n    </AppContext.Provider>\n  );\n}\n\n/**\n * The type representing every single type of action that can be dispatched to\n * handle the app context.\n */\nexport type AppContextAction =\n  | {\n      type: \"OPEN_APP_LIST\";\n    }\n  | {\n      type: \"CLOSE_APP_LIST\";\n    }\n  | {\n      type: \"OPEN_APP\";\n      appInstance: AppInstance;\n    }\n  | {\n      type: \"CLOSE_APP\";\n      appInstanceId: AppInstance[\"id\"];\n    }\n  | {\n      type: \"MINIMIZE_APP\";\n      appInstanceId: AppInstance[\"id\"];\n    }\n  | {\n      type: \"MAXIMIZE_APP\";\n      appInstanceId: AppInstance[\"id\"];\n    };\n"],"names":["WELCOME_APP_DEF","APPS","HELLO_WORLD_APP","DUPLICATE_IDS","app","AppContext","createContext","AppContextDispatch","appReducer","state","action","instanceId","appInstance","AppProvider","props","apps","dispatch","useReducer","useEffect","jsx"],"mappings":"iGAEO,MAAMA,EAAuB,CAClC,GAAI,UACJ,KAAM,UACN,KAAM,IACR,ECCaC,EAAmB,CAACC,EAAiBF,CAAe,EAE3DG,MAAoB,IAE1B,UAAWC,KAAOH,EAAM,CAClB,GAAAE,EAAc,IAAIC,EAAI,EAAE,EAAG,MAAM,IAAI,MAAM,qBAAqBA,EAAI,EAAE,EAAE,EAC9DD,EAAA,IAAIC,EAAI,EAAE,CAC1B,CCkBO,MAAAC,EAAAC,EAAA,cAAA,IAAA,EAEAC,EAAAD,EAAA,cAAA,IAAA,EAIA,SAAAE,EAAAC,EAAAC,EAAA,CAIL,OAAAA,EAAA,KAAA,CAAqB,IAAA,gBAEjB,MAAA,CAAO,GAAAD,EACF,WAAA,EACS,EACd,IAAA,iBAEA,MAAA,CAAO,GAAAA,EACF,WAAA,EACS,EACd,IAAA,YAEA,MAAA,CAAO,GAAAA,EACF,aAAAA,EAAA,aAAA,OAC8B,CAAA,CAAA,WAAAE,CAAA,IAAAA,IAAAD,EAAA,aACW,CAC5C,EACF,IAAA,WAEA,MAAA,CAAO,GAAAD,EACF,aAAA,CAAA,GAAAA,EAAA,aAAAC,EAAA,WAAA,CACqD,EAC1D,IAAA,eAEA,MAAA,CAAO,GAAAD,EACF,aAAAA,EAAA,aAAA,IAAAG,GAEDA,EAAA,aAAAF,EAAA,cACE,CAAO,GAAAE,EACF,UAAA,WACQ,EAIfA,CAAO,CACR,EACH,IAAA,eAEA,MAAA,CAAO,GAAAH,EACF,aAAAA,EAAA,aAAA,IAAAG,GAEDA,EAAA,aAAAF,EAAA,cACE,CAAO,GAAAE,EACF,UAAA,QACQ,EAIfA,CAAO,CACR,EACH,QAEA,OAAAH,CAAO,CAEb,CAOO,SAAAI,EAAAC,EAAA,CAQL,KAAA,CAAA,KAAAC,CAAA,EAAAD,EAEA,CAAAL,EAAAO,CAAA,EAAAC,EAAAA,WAAAT,EAAA,CAAiD,WAAA,GACnC,KAAAO,GAAAd,EACE,aAAA,CAAA,CACC,CAAA,EAGjBiB,OAAAA,EAAAA,UAAA,IAAA,CACE,QAAA,IAAA,YAAAT,CAAA,CAA8B,EAAA,CAAAA,CAAA,CAAA,EAGhCU,EAAAA,IAAAd,EAAA,SAAA,CAAA,MAAAI,EAAA,SAAAU,MAAAZ,EAAA,SAAA,CAAA,MAAAS,EAAA,SAAAF,EAAA,QAAA,CAAA,CAAA,CAAA,CAOF"}